-- Code from Waldek Hebisch to implement the numerical integration with complex functions 
-- Posted on the Google fricas-devel group on 2021-04-13 in response to my 
-- question on how to numerically integrate a function with complex output

pl := [0.9681602395_0762608983, 0.8360311073_266357943, 0.6133714327_0059039731, 0.3242534234_0380892904]::List(DoubleFloat);
wl := [0.3302393550_0125976316, 0.0812743883_6157441196_6, 0.1806481606_9485740398, 0.2606106964_029354623, 0.3123470770_4000284007]::List(DoubleFloat);

++ f : function 
++ x0 : start of integration 
++ h : 'length' of integration, ie. Upper - Lower integration limits
gauss9(f : DoubleFloat -> Complex(DoubleFloat), x0 : DoubleFloat, h : DoubleFloat) : Complex(DoubleFloat) ==
    h2 := h/(2::DoubleFloat)
    xm := x0 + h2
    s : Complex(DoubleFloat) := f(xm)*first(wl)
    for a in pl for w in rest(wl) repeat
        hh := h2*a
        s := s + w*(f(xm + hh) + f(xm - hh))
    h2*s 

++ f : function 
++ x0 : start of integration 
++ h : 'length' of integration, ie. Upper - Lower integration limits
++ eps : maximum tolerated error
++ max_eval : maximum number of iterations to run to minimise error before giving up

ad_gauss(f : DoubleFloat -> Complex(DoubleFloat), x0 : DoubleFloat,h : DoubleFloat, eps : DoubleFloat, max_level : Integer) : Complex(DoubleFloat) ==
    val0 := gauss9(f, x0, h)
    h2 := h/(2::DoubleFloat)
    val1 := gauss9(f, x0, h2)
    val2 := gauss9(f, x0 + h2, h2)
    real(abs(val0 - val1 - val2)) < eps => val0
    max_level = 0 =>
        print("max_level too small")
        val0
    eps2 := eps/(2::DoubleFloat)
    ad_gauss(f, x0, h2, eps2, max_level - 1) +
    ad_gauss(f, x0 + h2, h2, eps2, max_level - 1)

-- example usage:
-- testfun(x : DoubleFloat) : Complex(DoubleFloat) == exp(complex(1, x))
-- ad_gauss(f1, 0, 1, 1.0e-3, 30) 
-- Compare these results with the analytical output
-- test_math_fun == exp(complex(1,x))
-- integrate(test_math_fun, x=0..1)
